/*
insert license info here
*/
using System;

namespace Daan.Interface.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class DATablelastdate:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private decimal? tablelastdateid; 
		private string tablename; 
		private DateTime lastdate; 
		private DateTime createdate; 
		private string remark; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public DATablelastdate()
		{
			tablelastdateid = null; 
			tablename = null; 
			lastdate = new DateTime(); 
			createdate = new DateTime(); 
			remark = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>	
		[LogInfo("主键")]
		public decimal? Tablelastdateid
		{
			get { return tablelastdateid; }
			set { isChanged |= (tablelastdateid != value); tablelastdateid = value; }
		}
			
		/// <summary>
		/// 表名
		/// </summary>	
		[LogInfo("表名")]
		public string Tablename
		{
			get { return tablename; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Tablename", value, value.ToString());
				
				isChanged |= (tablename != value); tablename = value;
			}
		}
			
		/// <summary>
		/// 上次动作时间
		/// </summary>	
		[LogInfo("上次动作时间")]
		public DateTime Lastdate
		{
			get { return lastdate; }
			set { isChanged |= (lastdate != value); lastdate = value; }
		}
			
		/// <summary>
		/// 创建时间
		/// </summary>	
		[LogInfo("创建时间")]
		public DateTime Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// 备注
		/// </summary>	
		[LogInfo("备注")]
		public string Remark
		{
			get { return remark; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());
				
				isChanged |= (remark != value); remark = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
