/*
insert license info here
*/
using System;

namespace  Daan.Interface.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class DADictcustomer : BaseDomain
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
        private decimal? _dictcustomerid; 
		private string _customercode; 
		private string _fastcode; 
		private string _customername;
        private DateTime lastupdatedate;
        public DateTime Lastupdatedate
        {
            get { return lastupdatedate; }
            set { lastupdatedate = value; }
        }
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public DADictcustomer()
		{
			_dictcustomerid = 0; 
			_customercode = null; 
			_fastcode = null; 
			_customername = null;
            lastupdatedate = new DateTime();
			
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键，自动ID
		/// </summary>		
        public decimal? Dictcustomerid
		{
			get { return _dictcustomerid; }
			set { _isChanged |= (_dictcustomerid != value); _dictcustomerid = value; }
		}
			
		/// <summary>
		/// 客户代码
		/// </summary>		
		public string Customercode
		{
			get { return _customercode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Customercode", value, value.ToString());
				
				_isChanged |= (_customercode != value); _customercode = value;
			}
		}
			
		/// <summary>
		/// 助记符
		/// </summary>		
		public string Fastcode
		{
			get { return _fastcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());
				
				_isChanged |= (_fastcode != value); _fastcode = value;
			}
		}
			
		/// <summary>
		/// 客户名称
		/// </summary>		
		public string Customername
		{
			get { return _customername; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Customername", value, value.ToString());
				
				_isChanged |= (_customername != value); _customername = value;
			}
		}
	
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
