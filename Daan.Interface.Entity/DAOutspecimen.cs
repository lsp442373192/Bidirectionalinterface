/*
insert license info here
*/
using System;

namespace Daan.Interface.Entity
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class DAOutspecimen : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private decimal? outspecimenid;
        private string requestcode;
        private string hospsampleid;
        private string hospsamplenumber;
        private string patientnumber;
        private string bednumber;
        private DateTime samplingdate;
        private string patientsource;
        private string patientname;
        private string sex;
        private decimal? caculateage;
        private string patienttel;
        private string location;
        private string patientid;
        private string doctor;
        private string doctortel;
        private DateTime birthday;
        private decimal? age;
        private string ageunit;
        private string samstate;
        private string diagnostication;
        private string customertestcodes;
        private string customertestnames;
        private string datestcodes;
        private string datestnames;
        private string status;
        private string remark;
        private string babycount;
        private string lmp;
        private string lmpdate;
        private string uninevolumn;
        private string weight;
        private string height;
        private string bultrasonic;
        private string pregnant;
        private string enterby;
        private DateTime enterbydate;
        private DateTime Lastupdatedate;
        private DateTime createdate;
        private string usertype;
        private string bodystyle;
        private string customercode;

     




        #endregion

        public bool IsSelect { get; set; }

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public DAOutspecimen()
        {
            outspecimenid = null;
            requestcode = null;
            hospsampleid = null;
            hospsamplenumber = null;
            patientnumber = null;
            bednumber = null;
            samplingdate = new DateTime();
            patientsource = null;
            patientname = null;
            sex = null;
            caculateage = null;
            patienttel = null;
            location = null;
            patientid = null;
            doctor = null;
            doctortel = null;
            birthday = new DateTime();
            age = null;
            ageunit = null;
            samstate = null;
            diagnostication = null;
            customertestcodes = null;
            customertestnames = null;
            datestcodes = null;
            datestnames = null;
            status = null;
            remark = null;
            babycount = null;
            lmp = null;
            lmpdate = null;
            uninevolumn = null;
            weight = null;
            height = null;
            bultrasonic = null;
            pregnant = null;
            enterby = null;
            enterbydate = new DateTime();
            Lastupdatedate = new DateTime();
            createdate = new DateTime();
            usertype = null;
            bodystyle = null;
            customercode = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 主键
        /// </summary>	
        [LogInfo("主键")]
        public decimal? Outspecimenid
        {
            get { return outspecimenid; }
            set { isChanged |= (outspecimenid != value); outspecimenid = value; }
        }

        /// <summary>
        /// 请求代码（达安条码）
        /// </summary>	
        [LogInfo("请求代码（达安条码）")]
        public string Requestcode
        {
            get { return requestcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Requestcode", value, value.ToString());

                isChanged |= (requestcode != value); requestcode = value;
            }
        }

        /// <summary>
        /// 医院条码
        /// </summary>	
        [LogInfo("医院条码")]
        public string Hospsampleid
        {
            get { return hospsampleid; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Hospsampleid", value, value.ToString());

                isChanged |= (hospsampleid != value); hospsampleid = value;
            }
        }

        /// <summary>
        /// 医院样本号
        /// </summary>	
        [LogInfo("医院样本号")]
        public string Hospsamplenumber
        {
            get { return hospsamplenumber; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Hospsamplenumber", value, value.ToString());

                isChanged |= (hospsamplenumber != value); hospsamplenumber = value;
            }
        }

        /// <summary>
        /// 病历号
        /// </summary>	
        [LogInfo("病历号")]
        public string Patientnumber
        {
            get { return patientnumber; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Patientnumber", value, value.ToString());

                isChanged |= (patientnumber != value); patientnumber = value;
            }
        }

        /// <summary>
        /// 床号
        /// </summary>	
        [LogInfo("床号")]
        public string Bednumber
        {
            get { return bednumber; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Bednumber", value, value.ToString());

                isChanged |= (bednumber != value); bednumber = value;
            }
        }

        /// <summary>
        /// 采样时间
        /// </summary>	
        [LogInfo("采样时间")]
        public DateTime Samplingdate
        {
            get { return samplingdate; }
            set { isChanged |= (samplingdate != value); samplingdate = value; }
        }

        /// <summary>
        /// 1、门诊、2、住院 3、体检
        /// </summary>	
        [LogInfo("1、门诊、2、住院 3、体检")]
        public string Patientsource
        {
            get { return patientsource; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Patientsource", value, value.ToString());

                isChanged |= (patientsource != value); patientsource = value;
            }
        }

        /// <summary>
        /// 病人姓名
        /// </summary>	
        [LogInfo("病人姓名")]
        public string Patientname
        {
            get { return patientname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Patientname", value, value.ToString());

                isChanged |= (patientname != value); patientname = value;
            }
        }

        /// <summary>
        /// 性别 M 男  F 女  U 未知
        /// </summary>	
        [LogInfo("性别 M 男  F 女  U 未知")]
        public string Sex
        {
            get
            {
                //if (sex == "M")
                //{
                //    sex = "男";
                //}
                //else if (sex == "F")
                //{
                //    sex = "女";
                //}
                //else if (sex == "U")
                //{
                //    sex = "未知";
                //}
                return sex;
            }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Sex", value, value.ToString());

                isChanged |= (sex != value); sex = value;
            }
        }

        /// <summary>
        /// 计算后年龄 小时单位
        /// </summary>	
        [LogInfo("计算后年龄 小时单位")]
        public decimal? Caculateage
        {
            get { return caculateage; }
            set { isChanged |= (caculateage != value); caculateage = value; }
        }

        /// <summary>
        /// 病人电话
        /// </summary>	
        [LogInfo("病人电话")]
        public string Patienttel
        {
            get { return patienttel; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Patienttel", value, value.ToString());

                isChanged |= (patienttel != value); patienttel = value;
            }
        }

        /// <summary>
        /// 科室
        /// </summary>	
        [LogInfo("科室")]
        public string Location
        {
            get { return location; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Location", value, value.ToString());

                isChanged |= (location != value); location = value;
            }
        }

        /// <summary>
        /// 卡号
        /// </summary>	
        [LogInfo("卡号")]
        public string Patientid
        {
            get { return patientid; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Patientid", value, value.ToString());

                isChanged |= (patientid != value); patientid = value;
            }
        }

        /// <summary>
        /// 医生
        /// </summary>	
        [LogInfo("医生")]
        public string Doctor
        {
            get { return doctor; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Doctor", value, value.ToString());

                isChanged |= (doctor != value); doctor = value;
            }
        }

        /// <summary>
        /// 医生电话
        /// </summary>	
        [LogInfo("医生电话")]
        public string Doctortel
        {
            get { return doctortel; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Doctortel", value, value.ToString());

                isChanged |= (doctortel != value); doctortel = value;
            }
        }

        /// <summary>
        /// 生日
        /// </summary>	
        [LogInfo("生日")]
        public DateTime Birthday
        {
            get { return birthday; }
            set { isChanged |= (birthday != value); birthday = value; }
        }

        /// <summary>
        /// 年龄
        /// </summary>	
        [LogInfo("年龄")]
        public decimal? Age
        {
            get { return age; }
            set { isChanged |= (age != value); age = value; }
        }

        /// <summary>
        /// 年龄单位
        /// </summary>	
        [LogInfo("年龄单位")]
        public string Ageunit
        {
            get
            {
                //if (ageunit == "0")
                //{
                //    ageunit = "岁";
                //}
                //else if (ageunit == "1")
                //{
                //    ageunit = "月";
                //}
                //else if (ageunit == "2")
                //{
                //    ageunit = "日";
                //}
                return ageunit;
            }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Ageunit", value, value.ToString());

                isChanged |= (ageunit != value); ageunit = value;
            }
        }

        /// <summary>
        /// 标本状态  默认正常
        /// </summary>	
        [LogInfo("标本状态  默认正常")]
        public string Samstate
        {
            get { return samstate; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Samstate", value, value.ToString());

                isChanged |= (samstate != value); samstate = value;
            }
        }

        /// <summary>
        /// 诊断
        /// </summary>	
        [LogInfo("诊断")]
        public string Diagnostication
        {
            get { return diagnostication; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Diagnostication", value, value.ToString());

                isChanged |= (diagnostication != value); diagnostication = value;
            }
        }

        /// <summary>
        /// 客户项目代码，多个用逗号隔开
        /// </summary>	
        [LogInfo("客户项目代码，多个用逗号隔开")]
        public string Customertestcodes
        {
            get { return customertestcodes; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for Customertestcodes", value, value.ToString());

                isChanged |= (customertestcodes != value); customertestcodes = value;
            }
        }

        /// <summary>
        /// 客户项目名称，多个用逗号隔开
        /// </summary>	
        [LogInfo("客户项目名称，多个用逗号隔开")]
        public string Customertestnames
        {
            get { return customertestnames; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for Customertestnames", value, value.ToString());

                isChanged |= (customertestnames != value); customertestnames = value;
            }
        }

        /// <summary>
        /// 达安项目代码，多个用逗号隔开
        /// </summary>	
        [LogInfo("达安项目代码，多个用逗号隔开")]
        public string Datestcodes
        {
            get { return datestcodes; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for Datestcodes", value, value.ToString());

                isChanged |= (datestcodes != value); datestcodes = value;
            }
        }

        /// <summary>
        /// 达安项目名称，多个用逗号隔开
        /// </summary>	
        [LogInfo("达安项目名称，多个用逗号隔开")]
        public string Datestnames
        {
            get { return datestnames; }
            set
            {
                if (value != null && value.Length > 2000)
                    throw new ArgumentOutOfRangeException("Invalid value for Datestnames", value, value.ToString());

                isChanged |= (datestnames != value); datestnames = value;
            }
        }

        /// <summary>
        /// 0已申请 1已审核 2 已发送
        /// </summary>	
        [LogInfo("0已申请 1已审核 2 已发送")]
        public string Status
        {
            get
            {
                //if (status == "0")
                //{
                //    status = "已申请";
                //}
                //else if (status == "1")
                //{
                //    status = "已审核";
                //}
                //else if (status == "2")
                //{
                //    status = "已发送";
                //}
                return status;
            }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());

                isChanged |= (status != value); status = value;
            }
        }

        /// <summary>
        /// 备注
        /// </summary>	
        [LogInfo("备注")]
        public string Remark
        {
            get { return remark; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Remark", value, value.ToString());

                isChanged |= (remark != value); remark = value;
            }
        }

        /// <summary>
        /// 怀孕的胎数
        /// </summary>	
        [LogInfo("怀孕的胎数")]
        public string Babycount
        {
            get { return babycount; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Babycount", value, value.ToString());

                isChanged |= (babycount != value); babycount = value;
            }
        }

        /// <summary>
        /// 未次月经孕周
        /// </summary>	
        [LogInfo("未次月经孕周")]
        public string Lmp
        {
            get { return lmp; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Lmp", value, value.ToString());

                isChanged |= (lmp != value); lmp = value;
            }
        }

        /// <summary>
        /// 末次月经日期
        /// </summary>	
        [LogInfo("末次月经日期")]
        public string Lmpdate
        {
            get { return lmpdate; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Lmpdate", value, value.ToString());

                isChanged |= (lmpdate != value); lmpdate = value;
            }
        }

        /// <summary>
        /// 24小时尿量
        /// </summary>	
        [LogInfo("24小时尿量")]
        public string Uninevolumn
        {
            get { return uninevolumn; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Uninevolumn", value, value.ToString());

                isChanged |= (uninevolumn != value); uninevolumn = value;
            }
        }

        /// <summary>
        /// 体重
        /// </summary>	
        [LogInfo("体重")]
        public string Weight
        {
            get { return weight; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Weight", value, value.ToString());

                isChanged |= (weight != value); weight = value;
            }
        }

        /// <summary>
        /// 身高
        /// </summary>	
        [LogInfo("身高")]
        public string Height
        {
            get { return height; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Height", value, value.ToString());

                isChanged |= (height != value); height = value;
            }
        }

        /// <summary>
        /// B超孕周
        /// </summary>	
        [LogInfo("B超孕周")]
        public string Bultrasonic
        {
            get { return bultrasonic; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Bultrasonic", value, value.ToString());

                isChanged |= (bultrasonic != value); bultrasonic = value;
            }
        }

        /// <summary>
        /// B超孕日
        /// </summary>	
        [LogInfo("B超孕日")]
        public string Pregnant
        {
            get { return pregnant; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Pregnant", value, value.ToString());

                isChanged |= (pregnant != value); pregnant = value;
            }
        }

        /// <summary>
        /// 录单人
        /// </summary>	
        [LogInfo("录单人")]
        public string Enterby
        {
            get { return enterby; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Enterby", value, value.ToString());

                isChanged |= (enterby != value); enterby = value;
            }
        }

        /// <summary>
        /// 录单时间
        /// </summary>	
        [LogInfo("录单时间")]
        public DateTime Enterbydate
        {
            get { return enterbydate; }
            set { isChanged |= (enterbydate != value); enterbydate = value; }
        }

        /// <summary>
        /// 最后更新时间
        /// </summary>	
        [LogInfo("最后更新时间")]
        public DateTime Lastupdatedate1
        {
            get { return Lastupdatedate; }
            set { Lastupdatedate = value; }
        }
        /// <summary>
        /// 创建时间
        /// </summary>	
        [LogInfo("创建时间")]
        public DateTime Createdate
        {
            get { return createdate; }
            set { isChanged |= (createdate != value); createdate = value; }
        }
        /// <summary>
        /// 用户类型
        /// </summary>
        [LogInfo("用户类型")]
        public string Usertype
        {
            get { return usertype; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Enterby", value, value.ToString());

                isChanged |= (usertype != value); usertype = value;
            }
        }
        /// <summary>
        /// 体位
        /// </summary>
        [LogInfo("体位")]
        public string Bodystyle
        {
            get { return bodystyle; }
             set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Enterby", value, value.ToString());
                isChanged |= (bodystyle != value); bodystyle = value;
            }
        }
        /// <summary>
        /// 医院代码
        /// </summary>
        ///  [LogInfo("医院代码")]
        public string Customercode
        {
            get { return customercode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Enterby", value, value.ToString());
                isChanged |= (customercode != value); customercode = value;
            }
        }
        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
