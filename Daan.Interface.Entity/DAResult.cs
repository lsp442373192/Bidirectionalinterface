/*
insert license info here
*/
using System;

namespace Daan.Interface.Entity
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class DAResult : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private decimal? resultid;
        private string requestcode;
        private string hospsampleid;
        private string hospsamplenumber;
        private string testtype;
        private string customergroupcode;
        private string customergroupname;
        private string customertestcode;
        private string customertestname;
        private string dagroupcode;
        private string dagroupname;
        private string datestcode;
        private string datestname;
        private string seqno;
        private string testresult;
        private string unit;
        private string hlflag;
        private string resultcomment;
        private string reference;
        private string releasebyname;
        private DateTime? releasedate;
        private string authorizebyname;
        private DateTime? authorizedate;
        private string status;
        private string testmethod;
        private DateTime createdate;
        private string reportremark;
        private string panicflag;
        private string resultflag;
        private DateTime lastupdate;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public DAResult()
        {
            resultid = null;
            requestcode = null;
            hospsampleid = null;
            hospsamplenumber = null;
            testtype = null;
            customergroupcode = null;
            customergroupname = null;
            customertestcode = null;
            customertestname = null;
            dagroupcode = null;
            dagroupname = null;
            datestcode = null;
            datestname = null;
            seqno = null;
            testresult = null;
            unit = null;
            hlflag = null;
            resultcomment = null;
            reference = null;
            releasebyname = null;
            releasedate = null;
            authorizebyname = null;
            authorizedate = null;
            status = null;
            testmethod = null;
            createdate = new DateTime();
            reportremark = null;
            panicflag = null;
            resultflag = null;
            lastupdate = new DateTime();
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 主键
        /// </summary>	
        [LogInfo("主键")]
        public decimal? Resultid
        {
            get { return resultid; }
            set { isChanged |= (resultid != value); resultid = value; }
        }

        /// <summary>
        /// 请求代码（达安条码号）
        /// </summary>	
        [LogInfo("请求代码（达安条码号）")]
        public string Requestcode
        {
            get { return requestcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Requestcode", value, value.ToString());

                isChanged |= (requestcode != value); requestcode = value;
            }
        }

        /// <summary>
        /// 医院条码（唯一）
        /// </summary>	
        [LogInfo("医院条码（唯一）")]
        public string Hospsampleid
        {
            get { return hospsampleid; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Hospsampleid", value, value.ToString());

                isChanged |= (hospsampleid != value); hospsampleid = value;
            }
        }

        /// <summary>
        /// 医院样本号（唯一）
        /// </summary>	
        [LogInfo("医院样本号（唯一）")]
        public string Hospsamplenumber
        {
            get { return hospsamplenumber; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Hospsamplenumber", value, value.ToString());

                isChanged |= (hospsamplenumber != value); hospsamplenumber = value;
            }
        }

        /// <summary>
        /// 医学专业组
        /// </summary>	
        [LogInfo("医学专业组")]
        public string Testtype
        {
            get { return testtype; }
            set
            {
                if (value != null && value.Length > 80)
                    throw new ArgumentOutOfRangeException("Invalid value for Testtype", value, value.ToString());

                isChanged |= (testtype != value); testtype = value;
            }
        }

        /// <summary>
        /// 医院组合代码
        /// </summary>	
        [LogInfo("医院组合代码")]
        public string Customergroupcode
        {
            get { return customergroupcode; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Customergroupcode", value, value.ToString());

                isChanged |= (customergroupcode != value); customergroupcode = value;
            }
        }

        /// <summary>
        /// 医院组合名称
        /// </summary>	
        [LogInfo("医院组合名称")]
        public string Customergroupname
        {
            get { return customergroupname; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Customergroupname", value, value.ToString());

                isChanged |= (customergroupname != value); customergroupname = value;
            }
        }

        /// <summary>
        /// 医院单项代码
        /// </summary>	
        [LogInfo("医院单项代码")]
        public string Customertestcode
        {
            get { return customertestcode; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Customertestcode", value, value.ToString());

                isChanged |= (customertestcode != value); customertestcode = value;
            }
        }

        /// <summary>
        /// 医院单项名称
        /// </summary>	
        [LogInfo("医院单项名称")]
        public string Customertestname
        {
            get { return customertestname; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Customertestname", value, value.ToString());

                isChanged |= (customertestname != value); customertestname = value;
            }
        }

        /// <summary>
        /// 组合代码
        /// </summary>	
        [LogInfo("组合代码")]
        public string Dagroupcode
        {
            get { return dagroupcode; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Dagroupcode", value, value.ToString());

                isChanged |= (dagroupcode != value); dagroupcode = value;
            }
        }

        /// <summary>
        /// 组合名称
        /// </summary>	
        [LogInfo("组合名称")]
        public string Dagroupname
        {
            get { return dagroupname; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Dagroupname", value, value.ToString());

                isChanged |= (dagroupname != value); dagroupname = value;
            }
        }

        /// <summary>
        /// 单项代码
        /// </summary>	
        [LogInfo("单项代码")]
        public string Datestcode
        {
            get { return datestcode; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Datestcode", value, value.ToString());

                isChanged |= (datestcode != value); datestcode = value;
            }
        }

        /// <summary>
        /// 单项名称
        /// </summary>	
        [LogInfo("单项名称")]
        public string Datestname
        {
            get { return datestname; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Datestname", value, value.ToString());

                isChanged |= (datestname != value); datestname = value;
            }
        }

        /// <summary>
        /// 测试流水号
        /// </summary>	
        [LogInfo("测试流水号")]
        public string Seqno
        {
            get { return seqno; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Seqno", value, value.ToString());

                isChanged |= (seqno != value); seqno = value;
            }
        }

        /// <summary>
        /// 结果
        /// </summary>	
        [LogInfo("结果")]
        public string Testresult
        {
            get { return testresult; }
            set
            {
                if (value != null && value.Length > 4000)
                    throw new ArgumentOutOfRangeException("Invalid value for Testresult", value, value.ToString());

                isChanged |= (testresult != value); testresult = value;
            }
        }

        /// <summary>
        /// 单位
        /// </summary>	
        [LogInfo("单位")]
        public string Unit
        {
            get { return unit; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Unit", value, value.ToString());

                isChanged |= (unit != value); unit = value;
            }
        }

        /// <summary>
        /// 高低提示
        /// </summary>	
        [LogInfo("高低提示")]
        public string Hlflag
        {
            get { return hlflag; }
            set
            {
                if (value != null && value.Length > 10)
                    throw new ArgumentOutOfRangeException("Invalid value for Hlflag", value, value.ToString());

                isChanged |= (hlflag != value); hlflag = value;
                //阳性为A 转换成 *
                if (hlflag == "A") { hlflag = "*"; }
            }
        }

        /// <summary>
        /// 结果备注
        /// </summary>	
        [LogInfo("结果备注")]
        public string Resultcomment
        {
            get { return resultcomment; }
            set
            {
                if (value != null && value.Length > 4000)
                    throw new ArgumentOutOfRangeException("Invalid value for Resultcomment", value, value.ToString());

                isChanged |= (resultcomment != value); resultcomment = value;
            }
        }

        /// <summary>
        /// 参考范围
        /// </summary>	
        [LogInfo("参考范围")]
        public string Reference
        {
            get { return reference; }
            set
            {
                if (value != null && value.Length > 500)
                    throw new ArgumentOutOfRangeException("Invalid value for Reference", value, value.ToString());

                isChanged |= (reference != value); reference = value;
            }
        }

        /// <summary>
        /// 结果提交人
        /// </summary>	
        [LogInfo("结果提交人")]
        public string Releasebyname
        {
            get { return releasebyname; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Releasebyname", value, value.ToString());

                isChanged |= (releasebyname != value); releasebyname = value;
            }
        }

        /// <summary>
        /// 提交时间
        /// </summary>	
        [LogInfo("提交时间")]
        public DateTime? Releasedate
        {
            get { return releasedate; }
            set { isChanged |= (releasedate != value); releasedate = value; }
        }

        /// <summary>
        /// 审核人
        /// </summary>	
        [LogInfo("审核人")]
        public string Authorizebyname
        {
            get { return authorizebyname; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Authorizebyname", value, value.ToString());

                isChanged |= (authorizebyname != value); authorizebyname = value;
            }
        }

        /// <summary>
        /// 审核时间
        /// </summary>	
        [LogInfo("审核时间")]
        public DateTime? Authorizedate
        {
            get { return authorizedate; }
            set { isChanged |= (authorizedate != value); authorizedate = value; }
        }

        /// <summary>
        /// 状态
        /// </summary>	
        [LogInfo("状态")]
        public string Status
        {
            get { return status; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Status", value, value.ToString());

                isChanged |= (status != value); status = value;
            }
        }

        /// <summary>
        /// 测试方法
        /// </summary>	
        [LogInfo("测试方法")]
        public string Testmethod
        {
            get { return testmethod; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Testmethod", value, value.ToString());

                isChanged |= (testmethod != value); testmethod = value;
            }
        }

        /// <summary>
        /// 创建时间
        /// </summary>	
        [LogInfo("创建时间")]
        public DateTime Createdate
        {
            get { return createdate; }
            set { isChanged |= (createdate != value); createdate = value; }
        }

        /// <summary>
        /// 报告备注
        /// </summary>	
        [LogInfo("报告备注")]
        public string Reportremark
        {
            get { return reportremark; }
            set
            {
                if (value != null && value.Length > 4000)
                    throw new ArgumentOutOfRangeException("Invalid value for Reportremark", value, value.ToString());

                isChanged |= (reportremark != value); reportremark = value;
            }
        }

        /// <summary>
        /// 危机值标志
        /// </summary>	
        [LogInfo("危机值标志")]
        public string Panicflag
        {
            get { return panicflag; }
            set
            {
                if (value != null && value.Length > 30)
                    throw new ArgumentOutOfRangeException("Invalid value for Panicflag", value, value.ToString());

                isChanged |= (panicflag != value); panicflag = value;
            }
        }

        /// <summary>
        /// 病理阴阳性值
        /// </summary>	
        [LogInfo("病理阴阳性值")]
        public string Resultflag
        {
            get { return resultflag; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for resultflag", value, value.ToString());

                isChanged |= (resultflag != value); resultflag = value;
            }
        }

        /// <summary>
        /// 更新时间
        /// </summary>	
        [LogInfo("更新时间")]
        public DateTime Lastupdate
        {
            get { return lastupdate; }
            set { isChanged |= (lastupdate != value); lastupdate = value; }
        }



        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
