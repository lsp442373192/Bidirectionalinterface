/*
insert license info here
*/
using System;

namespace Daan.Interface.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
    public sealed class DADictlocation : BaseDomain
	{
		#region Private Members
		private bool _isChanged;
		private bool _isDeleted;
		private decimal? _dictlocationid; 
		private string _fastcode; 
		private string _locationname; 
		private string _active; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public DADictlocation()
		{
			_dictlocationid = 0; 
			_fastcode = null; 
			_locationname = null; 
			_active = null; 

		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 自增长主键，
		/// </summary>		
		public decimal? Dictlocationid
		{
			get { return _dictlocationid; }
			set { _isChanged |= (_dictlocationid != value); _dictlocationid = value; }
		}
			
		/// <summary>
		/// 助记码
		/// </summary>		
		public string Fastcode
		{
			get { return _fastcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());
				
				_isChanged |= (_fastcode != value); _fastcode = value;
			}
		}
			
	
			
		/// <summary>
		/// 科室名称
		/// </summary>		
		public string Locationname
		{
			get { return _locationname; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Locationname", value, value.ToString());
				
				_isChanged |= (_locationname != value); _locationname = value;
			}
		}
			
		
			
		/// <summary>
		/// 是否可用 0-否  1- 是
		/// </summary>		
		public string Active
		{
			get { return _active; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Active", value, value.ToString());
				
				_isChanged |= (_active != value); _active = value;
			}
		}
			
		
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}
