/*
insert license info here
*/
using System;

namespace Daan.Interface.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class DAMicorgresult:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private decimal? micorgresultid; 
		private string requestcode; 
		private string hospsampleid; 
		private string hospsamplenumber; 
		private DateTime createdate; 
		private string engorgname; 
		private string organismcode; 
		private string organismname; 
		private string tips; 
		private string quantity; 
		private string quantitycomment; 
		private decimal? displayorder; 
		private string reportoption; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public DAMicorgresult()
		{
			micorgresultid = null; 
			requestcode = null; 
			hospsampleid = null; 
			hospsamplenumber = null; 
			createdate = new DateTime(); 
			engorgname = null; 
			organismcode = null; 
			organismname = null; 
			tips = null; 
			quantity = null; 
			quantitycomment = null; 
			displayorder = null; 
			reportoption = null; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 细菌结果ID，系统内码
		/// </summary>	
		[LogInfo("细菌结果ID，系统内码")]
		public decimal? Micorgresultid
		{
			get { return micorgresultid; }
			set { isChanged |= (micorgresultid != value); micorgresultid = value; }
		}
			
		/// <summary>
		/// 请求代码（达安条码号）
		/// </summary>	
		[LogInfo("请求代码（达安条码号）")]
		public string Requestcode
		{
			get { return requestcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Requestcode", value, value.ToString());
				
				isChanged |= (requestcode != value); requestcode = value;
			}
		}
			
		/// <summary>
		/// 医院条码（唯一）
		/// </summary>	
		[LogInfo("医院条码（唯一）")]
		public string Hospsampleid
		{
			get { return hospsampleid; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Hospsampleid", value, value.ToString());
				
				isChanged |= (hospsampleid != value); hospsampleid = value;
			}
		}
			
		/// <summary>
		/// 医院样本号（唯一）
		/// </summary>	
		[LogInfo("医院样本号（唯一）")]
		public string Hospsamplenumber
		{
			get { return hospsamplenumber; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Hospsamplenumber", value, value.ToString());
				
				isChanged |= (hospsamplenumber != value); hospsamplenumber = value;
			}
		}
			
		/// <summary>
		/// 用户生成日期
		/// </summary>	
		[LogInfo("用户生成日期")]
		public DateTime Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// 细菌英文名
		/// </summary>	
		[LogInfo("细菌英文名")]
		public string Engorgname
		{
			get { return engorgname; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Engorgname", value, value.ToString());
				
				isChanged |= (engorgname != value); engorgname = value;
			}
		}
			
		/// <summary>
		/// 细菌编码
		/// </summary>	
		[LogInfo("细菌编码")]
		public string Organismcode
		{
			get { return organismcode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Organismcode", value, value.ToString());
				
				isChanged |= (organismcode != value); organismcode = value;
			}
		}
			
		/// <summary>
		/// 细菌中文名
		/// </summary>	
		[LogInfo("细菌中文名")]
		public string Organismname
		{
			get { return organismname; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Organismname", value, value.ToString());
				
				isChanged |= (organismname != value); organismname = value;
			}
		}
			
		/// <summary>
		/// 提示
		/// </summary>	
		[LogInfo("提示")]
		public string Tips
		{
			get { return tips; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Tips", value, value.ToString());
				
				isChanged |= (tips != value); tips = value;
			}
		}
			
		/// <summary>
		/// 结果
		/// </summary>	
		[LogInfo("结果")]
		public string Quantity
		{
			get { return quantity; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Quantity", value, value.ToString());
				
				isChanged |= (quantity != value); quantity = value;
			}
		}
			
		/// <summary>
		/// 细菌评价
		/// </summary>	
		[LogInfo("细菌评价")]
		public string Quantitycomment
		{
			get { return quantitycomment; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Quantitycomment", value, value.ToString());
				
				isChanged |= (quantitycomment != value); quantitycomment = value;
			}
		}
			
		/// <summary>
		/// 显示顺序
		/// </summary>	
		[LogInfo("显示顺序")]
		public decimal? Displayorder
		{
			get { return displayorder; }
			set { isChanged |= (displayorder != value); displayorder = value; }
		}
			
		/// <summary>
		/// 0-KB法,1-mic 法
		/// </summary>	
		[LogInfo("0-KB法,1-mic 法")]
		public string Reportoption
		{
			get { return reportoption; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Reportoption", value, value.ToString());
				
				isChanged |= (reportoption != value); reportoption = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
