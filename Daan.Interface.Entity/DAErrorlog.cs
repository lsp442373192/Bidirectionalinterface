/*
insert license info here
*/
using System;

namespace Daan.Interface.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class DAErrorlog:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private decimal? errorlogid; 
		private decimal? dictuserid; 
		private string usercode; 
		private string username; 
		private DateTime createdate; 
		private string opcontent;
        private string usertype;
        private string ipaddress; 
        private string machinename;
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public DAErrorlog()
		{
			errorlogid = null; 
			dictuserid = null; 
			usercode = null; 
			username = null; 
			createdate = new DateTime(); 
			opcontent = null;
            usertype = null;
            ipaddress = null;
            machinename = null;

		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>	
		[LogInfo("主键")]
		public decimal? Errorlogid
		{
			get { return errorlogid; }
			set { isChanged |= (errorlogid != value); errorlogid = value; }
		}
			
		/// <summary>
		/// 操作用户ID
		/// </summary>	
		[LogInfo("操作用户ID")]
		public decimal? Dictuserid
		{
			get { return dictuserid; }
			set { isChanged |= (dictuserid != value); dictuserid = value; }
		}
			
		/// <summary>
		/// 用户编码或工号
		/// </summary>	
		[LogInfo("用户编码或工号")]
		public string Usercode
		{
			get { return usercode; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Usercode", value, value.ToString());
				
				isChanged |= (usercode != value); usercode = value;
			}
		}
			
		/// <summary>
		/// 用户名
		/// </summary>	
		[LogInfo("用户名")]
		public string Username
		{
			get { return username; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Username", value, value.ToString());
				
				isChanged |= (username != value); username = value;
			}
		}
			
		/// <summary>
		/// 创建时间
		/// </summary>	
		[LogInfo("创建时间")]
		public DateTime Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// 日志内容
		/// </summary>	
		[LogInfo("日志内容")]
		public string Opcontent
		{
			get { return opcontent; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Opcontent", value, value.ToString());
				
				isChanged |= (opcontent != value); opcontent = value;
			}
		}
        /// <summary>
        /// 用户类型
        /// </summary>
        [LogInfo("用户类型")]
        public string Usertype
        {
            get { return usertype; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Enterby", value, value.ToString());

                isChanged |= (usertype != value); usertype = value;
            }
        }
        /// <summary>
        /// ip地址
        /// </summary> 
        [LogInfo("ip地址")]
        public string Ipaddress
        {
            get
            {
                return ipaddress;
            }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Enterby", value, value.ToString());

                isChanged |= (ipaddress != value);
                ipaddress = value;
            }
        }

        /// <summary>
        /// 机器名
        /// </summary> 
        [LogInfo("机器名")]
        public string Machinename
        {
            get
            {
                return machinename;
            }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Enterby", value, value.ToString());

                isChanged |= (machinename != value);
                machinename = value;
            }
        }
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
