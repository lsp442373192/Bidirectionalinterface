/*
insert license info here
*/
using System;

namespace Daan.Interface.Entity
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class VDAListests : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private bool isseleted;
        private string testcode;
        private string testname;
        private string shortname;
        private string englishname;
        private string engshortname;
        private string testtype;
        private string fastcode;
        private string testmethod;
        private string isgroup;

        private decimal? _testmapid;
        private string _datestcode;
        private string _datestname;
        private string _customertestcode;
        private string _customertestname;


        private string customerGroupCode;
        private string customerGroupName;
        private string daGroupCode;
        private string daGroupName;
        private string subtestcode;
        private string subtestname;





        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public VDAListests()
        {
            IsSelect = false;
            testcode = null;
            testname = null;
            shortname = null;
            englishname = null;
            engshortname = null;
            testtype = null;
            fastcode = null;
            testmethod = null;
            isgroup = null;

            _testmapid = null;
            _datestcode = null;
            _datestname = null;
            _customertestcode = null;
            _customertestname = null;

            customerGroupCode = null;
            customerGroupName = null;
            daGroupCode = null;
            daGroupName = null;
            subtestcode = null;
            subtestname = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties



        public string Subtestcode
        {
            get { return subtestcode; }
            set
            {
                subtestcode = value;
                if (subtestcode != null) { subtestcode = subtestcode.Trim(); }
            }
        }


        public string Subtestname
        {
            get { return subtestname; }
            set { subtestname = value; }
        }

        public string CustomerGroupCode
        {
            get { return customerGroupCode; }
            set
            {
                customerGroupCode = value;
                if (customerGroupCode != null) { customerGroupCode = customerGroupCode.Trim(); }
            }
        }


        public string CustomerGroupName
        {
            get { return customerGroupName; }
            set { customerGroupName = value; }
        }

        public string DaGroupCode
        {
            get { return daGroupCode; }
            set
            {
                daGroupCode = value;
                if (daGroupCode != null) { daGroupCode = daGroupCode.Trim(); }
            }
        }


        public string DaGroupName
        {
            get { return daGroupName; }
            set { daGroupName = value; }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Testcode
        {
            get { return testcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Testcode", value, value.ToString());

                isChanged |= (testcode != value); testcode = value;

                if (testcode != null) { testcode = testcode.Trim(); }
            }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Testname
        {
            get { return testname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Testname", value, value.ToString());

                isChanged |= (testname != value); testname = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Shortname
        {
            get { return shortname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Shortname", value, value.ToString());

                isChanged |= (shortname != value); shortname = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Englishname
        {
            get { return englishname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Englishname", value, value.ToString());

                isChanged |= (englishname != value); englishname = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Engshortname
        {
            get { return engshortname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Engshortname", value, value.ToString());

                isChanged |= (engshortname != value); engshortname = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Testtype
        {
            get { return testtype; }
            set
            {
                if (value != null && value.Length > 80)
                    throw new ArgumentOutOfRangeException("Invalid value for Testtype", value, value.ToString());

                isChanged |= (testtype != value); testtype = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Fastcode
        {
            get { return fastcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());

                isChanged |= (fastcode != value); fastcode = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Testmethod
        {
            get { return testmethod; }
            set
            {
                if (value != null && value.Length > 80)
                    throw new ArgumentOutOfRangeException("Invalid value for Testmethod", value, value.ToString());

                isChanged |= (testmethod != value); testmethod = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Isgroup
        {
            get { return isgroup; }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Isgroup", value, value.ToString());

                isChanged |= (isgroup != value); isgroup = value;
            }
        }
        #region>>>Testmap
        /// <summary>
        /// 主键
        /// </summary>	
        [LogInfo("主键")]
        public decimal? Testmapid
        {
            get { return _testmapid; }
            set { isChanged |= (_testmapid != value); _testmapid = value; }
        }

        /// <summary>
        /// 达安项目代码
        /// </summary>	
        [LogInfo("达安项目代码")]
        public string Datestcode
        {
            get { return _datestcode; }
            set
            {
                //if (value != null && value.Length > 80)
                //    throw new ArgumentOutOfRangeException("Invalid value for Datestcode", value, value.ToString());

                isChanged |= (_datestcode != value); _datestcode = value;

                if (_datestcode != null) { _datestcode = _datestcode.Trim(); }
            }
        }

        /// <summary>
        /// 达安项目名称
        /// </summary>	
        [LogInfo("达安项目名称")]
        public string Datestname
        {
            get { return _datestname; }
            set
            {
                //if (value != null && value.Length > 80)
                //    throw new ArgumentOutOfRangeException("Invalid value for Datestname", value, value.ToString());

                isChanged |= (_datestname != value); _datestname = value;
            }
        }

        /// <summary>
        /// 客户项目代码
        /// </summary>	
        [LogInfo("客户项目代码")]
        public string Customertestcode
        {
            get { return _customertestcode; }
            set
            {
                //if (value != null && value.Length > 100)
                //    throw new ArgumentOutOfRangeException("Invalid value for Customertestcode", value, value.ToString());

                isChanged |= (_customertestcode != value); _customertestcode = value;

                if (_customertestcode != null) { _customertestcode = _customertestcode.Trim(); }
            }
        }

        /// <summary>
        /// 客户项目名称
        /// </summary>	
        [LogInfo("客户项目名称")]
        public string Customertestname
        {
            get { return _customertestname; }
            set
            {
                //if (value != null && value.Length > 200)
                //    throw new ArgumentOutOfRangeException("Invalid value for Customertestname", value, value.ToString());

                isChanged |= (_customertestname != value); _customertestname = value;
            }
        }
        #endregion
        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        /// <summary>
        /// 是否对照好
        /// </summary>
        public bool IsSelect
        {
            get { return isseleted; }
            set { isseleted = value; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
