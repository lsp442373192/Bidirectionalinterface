/*
insert license info here
*/
using System;

namespace Daan.Interface.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class DADicttestitem:BaseDomain
	{
		#region Private Members
        private bool isChanged;
        private bool isDeleted;
        private decimal? datestitemid; 
		private string datestcode; 
		private string datestname; 
		private string englishname; 
		private string engshortname; 
		private string isgroup; 
		private string testmethod; 
		private string testtype; 
		private DateTime createtime; 
		private string fastcode;
        private string sampleType;

    
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public DADicttestitem()
		{
			datestitemid = null; 
			datestcode = null; 
			datestname = null; 
			englishname = null; 
			engshortname = null; 
			isgroup = null; 
			testmethod = null; 
			testtype = null; 
			createtime = new DateTime(); 
			fastcode = null;
            sampleType = null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 项目id
		/// </summary>	
		[LogInfo("项目id")]
        public decimal? Datestitemid
		{
			get { return datestitemid; }
			set { isChanged |= (datestitemid != value); datestitemid = value; }
		}
			
		/// <summary>
		/// 项目代码
		/// </summary>	
		[LogInfo("项目代码")]
		public string Datestcode
		{
			get { return datestcode; }
			set	
			{
				if( value!= null && value.Length > 30)
					throw new ArgumentOutOfRangeException("Invalid value for Datestcode", value, value.ToString());
				
				isChanged |= (datestcode != value); datestcode = value;
			}
		}
			
		/// <summary>
		/// 项目名称
		/// </summary>	
		[LogInfo("项目名称")]
		public string Datestname
		{
			get { return datestname; }
			set	
			{
				if( value!= null && value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for Datestname", value, value.ToString());
				
				isChanged |= (datestname != value); datestname = value;
			}
		}
			
		/// <summary>
		/// 英文名
		/// </summary>	
		[LogInfo("英文名")]
		public string Englishname
		{
			get { return englishname; }
			set	
			{
				if( value!= null && value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for Englishname", value, value.ToString());
				
				isChanged |= (englishname != value); englishname = value;
			}
		}
			
		/// <summary>
		/// 英文缩写
		/// </summary>	
		[LogInfo("英文缩写")]
		public string Engshortname
		{
			get { return engshortname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Engshortname", value, value.ToString());
				
				isChanged |= (engshortname != value); engshortname = value;
			}
		}
			
		/// <summary>
		/// 测试项的类别：0-单项  1-组合
		/// </summary>	
		[LogInfo("测试项的类别：0-单项  1-组合")]
		public string Isgroup
		{
			get { return isgroup; }
			set	
			{
				if( value!= null && value.Length > 1)
					throw new ArgumentOutOfRangeException("Invalid value for Isgroup", value, value.ToString());
				
				isChanged |= (isgroup != value); isgroup = value;
			}
		}
			
		/// <summary>
		/// 方法
		/// </summary>	
		[LogInfo("方法")]
		public string Testmethod
		{
			get { return testmethod; }
			set	
			{
				if( value!= null && value.Length > 80)
					throw new ArgumentOutOfRangeException("Invalid value for Testmethod", value, value.ToString());
				
				isChanged |= (testmethod != value); testmethod = value;
			}
		}
			
		/// <summary>
		/// 医学专业组
		/// </summary>	
		[LogInfo("医学专业组")]
		public string Testtype
		{
			get { return testtype; }
			set	
			{
				if( value!= null && value.Length > 80)
					throw new ArgumentOutOfRangeException("Invalid value for Testtype", value, value.ToString());
				
				isChanged |= (testtype != value); testtype = value;
			}
		}
			
		/// <summary>
		/// 创建时间
		/// </summary>	
		[LogInfo("创建时间")]
		public DateTime Createtime
		{
			get { return createtime; }
			set { isChanged |= (createtime != value); createtime = value; }
		}
			
		/// <summary>
		/// 快速录入码
		/// </summary>	
		[LogInfo("快速录入码")]
		public string Fastcode
		{
			get { return fastcode; }
			set	
			{
				if( value!= null && value.Length > 80)
					throw new ArgumentOutOfRangeException("Invalid value for Fastcode", value, value.ToString());
				
				isChanged |= (fastcode != value); fastcode = value;
			}
		}

        /// <summary>
        /// 标本类型
        /// </summary>	
        [LogInfo("标本类型")]
        public string SampleType
        {
            get { return sampleType; }
			set	
			{
				if( value!= null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for SampleType", value, value.ToString());
				
				isChanged |= (sampleType != value); sampleType = value;
			}
        }
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
