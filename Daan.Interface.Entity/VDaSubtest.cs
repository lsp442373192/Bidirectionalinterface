/*
insert license info here
*/
using System;

namespace Daan.Interface.Entity
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class VDaSubtest : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private string testcode;
        private string subtestcode;
        private string subtestname;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public VDaSubtest()
        {
            testcode = null;
            subtestcode = null;
            subtestname = null;
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Testcode
        {
            get { return testcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Testcode", value, value.ToString());

                isChanged |= (testcode != value); testcode = value;

                if (testcode != null) { testcode = testcode.Trim(); }
            }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Subtestcode
        {
            get { return subtestcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Subtestcode", value, value.ToString());

                isChanged |= (subtestcode != value); subtestcode = value;

                if (subtestcode != null) { subtestcode = subtestcode.Trim(); }
            }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Subtestname
        {
            get { return subtestname; }
            set
            {
                if (value != null && value.Length > 100)
                    throw new ArgumentOutOfRangeException("Invalid value for Subtestname", value, value.ToString());

                isChanged |= (subtestname != value); subtestname = value;
            }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
