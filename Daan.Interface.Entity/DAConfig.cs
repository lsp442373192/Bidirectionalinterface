/*
insert license info here
*/
using System;

namespace Daan.Interface.Entity
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class DAConfig : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private decimal? da_configid;
        private string dbversion;
        private string hospname;
        private string address;
        private string username;
        private string password;
        private string interval;
        private string usehospcode;
        private string sitecode;
        private string model;
        private DateTime lastupdate;

      
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public DAConfig()
        {
            da_configid = null;
            dbversion = null;
            hospname = null;
            address = null;
            username = null;
            password = null;
            interval = null;
            usehospcode = null;
            sitecode = null;
            model = "0";
            lastupdate = new DateTime();
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public decimal? DaConfigid
        {
            get { return da_configid; }
            set { isChanged |= (da_configid != value); da_configid = value; }
        }

        /// <summary>
        /// 数据库版本
        /// </summary>	
        [LogInfo("数据库版本")]
        public string Dbversion
        {
            get { return dbversion; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Dbversion", value, value.ToString());

                isChanged |= (dbversion != value); dbversion = value;
            }
        }

        /// <summary>
        /// 医院名称
        /// </summary>	
        [LogInfo("医院名称")]
        public string Hospname
        {
            get { return hospname; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Hospname", value, value.ToString());

                isChanged |= (hospname != value); hospname = value;
            }
        }



        /// <summary>
        /// WEBSERVICE地址
        /// </summary>	
        [LogInfo("WEBSERVICE地址")]
        public string Address
        {
            get { return address; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Address", value, value.ToString());

                isChanged |= (address != value); address = value;
            }
        }

        /// <summary>
        /// WEBSERVICE登录用户名
        /// </summary>	
        [LogInfo("WEBSERVICE登录用户名")]
        public string Username
        {
            get { return username; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Username", value, value.ToString());

                isChanged |= (username != value); username = value;
            }
        }

        /// <summary>
        /// WEBSERVICE登录用户密码
        /// </summary>	
        [LogInfo("WEBSERVICE登录用户密码")]
        public string Password
        {
            get { return password; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Password", value, value.ToString());

                isChanged |= (password != value); password = value;
            }
        }

        /// <summary>
        /// 接收频率单位分钟
        /// </summary>	
        [LogInfo("接收频率单位分钟")]
        public string Interval
        {
            get { return interval; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Interval", value, value.ToString());

                isChanged |= (interval != value); interval = value;
            }
        }

        /// <summary>
        /// 接收频率单位分钟 数字类型
        /// </summary>	
        [LogInfo("接收频率-秒")]
        public double IntervalToDouble
        {
            get
            {

                Double _interval = 0;
                if (Interval != "")
                {
                    try
                    {
                        _interval = Convert.ToDouble(Interval);
                    }
                    catch (Exception)
                    {
                        _interval = DefaultConfig.INTERVAL;
                    }
                }
                _interval = _interval * 1000 * 60;
                return _interval;
            }
        }



        /// <summary>
        /// 医院使用条码取1   医院使用样本号取0
        /// </summary>	
        [LogInfo("医院使用条码取1   医院使用样本号取0")]
        public string Usehospcode
        {
            get { return usehospcode; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Usehospcode", value, value.ToString());

                isChanged |= (usehospcode != value); usehospcode = value;
            }
        }

        /// <summary>
        /// 分点代码
        /// </summary>	
        [LogInfo("分点代码")]
        public string Sitecode
        {
            get { return sitecode; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for Sitecode", value, value.ToString());

                isChanged |= (sitecode != value); sitecode = value;
            }
        }

        /// <summary>
        /// 对接模式  0 ：组合，单项对接  1：组合对接
        /// </summary>	
        [LogInfo("分点代码")]
        public string Model
        {
            get { return model; }
            set
            {
                if (value != null && value.Length > 50)
                    throw new ArgumentOutOfRangeException("Invalid value for model", value, value.ToString());

                isChanged |= (model != value); model = value;
            }
        }

        /// <summary>
        /// 更新时间
        /// </summary>	
        [LogInfo("更新时间")]
        public DateTime Lastupdate
        {
            get { return lastupdate; }
            set { isChanged |= (lastupdate != value); lastupdate = value; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
