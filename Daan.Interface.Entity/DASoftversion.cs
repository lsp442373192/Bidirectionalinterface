using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Daan.Interface.Entity
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class DASoftversion
    {
        #region Private Members
		private bool isChanged;
		private bool isDeleted;
		private decimal? versioncode; 
		private string versioninfo; 
		private DateTime updatedate; 
		private string remark; 
		private string expansion; 
		private string exceptionlog;

       

		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
        public DASoftversion()
		{
            versioncode = null;
            versioninfo = null; 
            updatedate = new DateTime();
            remark = null;
            expansion = null;
            exceptionlog = null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 版本号
		/// </summary>	
		[LogInfo("版本号")]
        public decimal? Versioncode
		{
            get { return versioncode; }
            set { isChanged |= (versioncode != value); versioncode = value; }
		}
			
		/// <summary>
        /// 版本更新信息
		/// </summary>	
        [LogInfo("版本更新信息")]
        public string Versioninfo
		{
            get { return versioninfo; }
			set	
			{
				if( value!= null && value.Length > 4000)
                    throw new ArgumentOutOfRangeException("Invalid value for Versioninfo", value, value.ToString());

                isChanged |= (versioninfo != value); versioninfo = value;
			}
		}
			
		/// <summary>
        /// 更新日期
		/// </summary>	
        [LogInfo("更新日期")]
        public DateTime Updatedate
		{
            get { return updatedate; }
            set { isChanged |= (updatedate != value); updatedate = value; }
		}
			
		/// <summary>
        /// 备注
		/// </summary>	
        [LogInfo("备注")]
		public string Remark
		{
			get { return remark; }
			set	
			{
				if( value!= null && value.Length > 4000)
                    throw new ArgumentOutOfRangeException("Invalid value for remark", value, value.ToString());

                isChanged |= (remark != value); remark = value;
			}
		}
			
		/// <summary>
        /// 扩展字段备用
		/// </summary>	
        [LogInfo("扩展字段备用")]
        public string Expansion
		{
			get { return expansion; }
			set	
			{
				if( value!= null && value.Length > 4000)
                    throw new ArgumentOutOfRangeException("Invalid value for Expansion", value, value.ToString());

                isChanged |= (expansion != value); expansion = value;
			}
		}
			
		/// <summary>
        /// 版本更新日志,不管成功失败,都要记录日志
		/// </summary>	
        [LogInfo("版本更新日志,不管成功失败,都要记录日志")]
        public string Exceptionlog
		{
            get { return exceptionlog; }
            set 
            {
                if (value != null && value.Length > 4000)
                    throw new ArgumentOutOfRangeException("Invalid value for exceptionlog", value, value.ToString());

                isChanged |= (exceptionlog != value); exceptionlog = value;
            }
		}

		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
    }
}
