/*
insert license info here
*/
using System;

namespace Daan.Interface.Entity
{
    /// <summary>
    ///	Generated by MyGeneration using the IBatis Object Mapping template
    /// </summary>
    [Serializable]
    public sealed class DALispicture : BaseDomain
    {
        #region Private Members
        private bool isChanged;
        private bool isDeleted;
        private decimal? lis_pictureid;
        private string requestcode;
        private string hospsamplenumber;
        private string hospsampleid;
        private decimal? indexno;
        private string description;
        private byte[] imagedata;
        private DateTime createdate;
        #endregion

        #region Default ( Empty ) Class Constuctor
        /// <summary>
        /// default constructor
        /// </summary>
        public DALispicture()
        {
            lis_pictureid = null;
            requestcode = null;
            hospsamplenumber = null;
            hospsampleid = null;
            indexno = null;
            description = null;
            imagedata = new byte[0];
            createdate = new DateTime();
        }
        #endregion // End of Default ( Empty ) Class Constuctor

        #region Public Properties

        /// <summary>
        /// 主键
        /// </summary>	
        [LogInfo("主键")]
        public decimal? Lis_Pictureid
        {
            get { return lis_pictureid; }
            set { isChanged |= (lis_pictureid != value); lis_pictureid = value; }
        }

        /// <summary>
        /// 请求代码（达安条码）
        /// </summary>	
        [LogInfo("请求代码（达安条码）")]
        public string Requestcode
        {
            get { return requestcode; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Requestcode", value, value.ToString());

                isChanged |= (requestcode != value); requestcode = value;
            }
        }

        /// <summary>
        /// 医院样本号
        /// </summary>	
        [LogInfo("医院样本号")]
        public string Hospsamplenumber
        {
            get { return hospsamplenumber; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Hospsamplenumber", value, value.ToString());

                isChanged |= (hospsamplenumber != value); hospsamplenumber = value;
            }
        }

        /// <summary>
        /// 医院条码
        /// </summary>	
        [LogInfo("医院条码")]
        public string Hospsampleid
        {
            get { return hospsampleid; }
            set
            {
                if (value != null && value.Length > 20)
                    throw new ArgumentOutOfRangeException("Invalid value for Hospsampleid", value, value.ToString());

                isChanged |= (hospsampleid != value); hospsampleid = value;
            }
        }

        /// <summary>
        /// 序号
        /// </summary>	
        [LogInfo("序号")]
        public decimal? Indexno
        {
            get { return indexno; }
            set { isChanged |= (indexno != value); indexno = value; }
        }

        /// <summary>
        /// 图片描述
        /// </summary>	
        [LogInfo("图片描述")]
        public string Description
        {
            get { return description; }
            set
            {
                if (value != null && value.Length > 200)
                    throw new ArgumentOutOfRangeException("Invalid value for Description", value, value.ToString());

                isChanged |= (description != value); description = value;
            }
        }

        /// <summary>
        /// 图片数据  BASE64编码
        /// </summary>	
        [LogInfo("图片数据  BASE64编码")]
        public byte[] Imagedata
        {
            get { return imagedata; }
            set { isChanged |= (imagedata != value); imagedata = value; }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public DateTime Createdate
        {
            get { return createdate; }
            set { isChanged |= (createdate != value); createdate = value; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsChanged
        {
            get { return isChanged; }
        }

        /// <summary>
        /// Returns whether or not the object has changed it's values.
        /// </summary>
        public bool IsDeleted
        {
            get { return isDeleted; }
        }

        #endregion


        #region Public Functions

        /// <summary>
        /// mark the item as deleted
        /// </summary>
        public void MarkAsDeleted()
        {
            isDeleted = true;
            isChanged = true;
        }

        #endregion


    }
}
