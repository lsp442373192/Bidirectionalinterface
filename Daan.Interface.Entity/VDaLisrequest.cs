/*
insert license info here
*/
using System;

namespace Daan.Interface.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class VDaLisrequest:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private string hospsampleid; 
		private string hospsamplenumber; 
		private string patientnumber; 
		private string bednumber; 
		private DateTime samplingdate; 
		private string pname; 
		private string sex; 
		private DateTime birthday;
        private string age; 
		private string ageunit; 
		private string patienttel; 
		private string sectionoffice; 
		private string doctor; 
		private string doctortel;
        private string diagnostication; 
		private string babycount; 
		private string lmp; 
		private string lmpdate;
        private decimal? uninevolumn;
        private decimal? weight;
        private decimal? height;
		private string bultrasonic; 
		private string pregnant;
        private DateTime enterdate;
        private string bodystyle;

       

       
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public VDaLisrequest()
		{
			hospsampleid = null; 
			hospsamplenumber = null; 
			patientnumber = null; 
			bednumber = null; 
			samplingdate = new DateTime(); 
			pname = null; 
			sex = null;
            birthday = new DateTime(); 
			age = null; 
			ageunit = null; 
			patienttel = null; 
			sectionoffice = null; 
			doctor = null; 
			doctortel = null;
            diagnostication = null; 
			babycount = null; 
			lmp = null; 
			lmpdate = null; 
			uninevolumn = null; 
			weight = null; 
			height = null; 
			bultrasonic = null; 
			pregnant = null;
            enterdate = new DateTime();
            bodystyle = null;
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Hospsampleid
		{
			get { return hospsampleid; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Hospsampleid", value, value.ToString());
				
				isChanged |= (hospsampleid != value); hospsampleid = value;

                if (hospsampleid != null) { hospsampleid = hospsampleid.Trim(); }
			}
		}
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Hospsamplenumber
		{
			get { return hospsamplenumber; }
			set	
			{
				if( value!= null && value.Length > 40)
					throw new ArgumentOutOfRangeException("Invalid value for Hospsamplenumber", value, value.ToString());
				
				isChanged |= (hospsamplenumber != value); hospsamplenumber = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Patientnumber
		{
			get { return patientnumber; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Patientnumber", value, value.ToString());
				
				isChanged |= (patientnumber != value); patientnumber = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Bednumber
		{
			get { return bednumber; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Bednumber", value, value.ToString());
				
				isChanged |= (bednumber != value); bednumber = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public DateTime Samplingdate
		{
			get { return samplingdate; }
			set { isChanged |= (samplingdate != value); samplingdate = value; }
		}
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Pname
		{
			get { return pname; }
			set	
			{
				if( value!= null && value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for Pname", value, value.ToString());
				
				isChanged |= (pname != value); pname = value;
			}
		}

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Sex
        {
            get
            {
                return sex;
            }
            set
            {
                if (value != null && value.Length > 10)
                    throw new ArgumentOutOfRangeException("Invalid value for Sex", value, value.ToString());

                isChanged |= (sex != value); sex = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public DateTime Birthday
        {
            get { return birthday; }
            //set { birthday = value; }
            set { isChanged |= (birthday != value);
                birthday = value;
            }
        }

        // <summary>
        // 生日
        // </summary>	
        //[LogInfo("生日")]
        //public DateTime Birthday
        //{
        //    get { return birthday; }
        //    set { 
        //        isChanged |= (birthday != value); 
        //        birthday = value;
        //        DateTime temp = birthday;
        //    }
        //}
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string  Age
		{
			get { return age; }
			set	
			{
                //if( value!= null && value.Length > 100)
                //    throw new ArgumentOutOfRangeException("Invalid value for Age", value, value.ToString());
				
				isChanged |= (age != value); age = value;
			}
		}

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Ageunit
        {
            get
            {
                return ageunit;
            }
            set
            {
                if (value != null && value.Length > 1)
                    throw new ArgumentOutOfRangeException("Invalid value for Ageunit", value, value.ToString());

                isChanged |= (ageunit != value); ageunit = value;
            }
        }
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Patienttel
		{
			get { return patienttel; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Patienttel", value, value.ToString());
				
				isChanged |= (patienttel != value); patienttel = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Sectionoffice
		{
			get { return sectionoffice; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Sectionoffice", value, value.ToString());
				
				isChanged |= (sectionoffice != value); sectionoffice = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Doctor
		{
			get { return doctor; }
			set	
			{
				if( value!= null && value.Length > 60)
					throw new ArgumentOutOfRangeException("Invalid value for Doctor", value, value.ToString());
				
				isChanged |= (doctor != value); doctor = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Doctortel
		{
			get { return doctortel; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Doctortel", value, value.ToString());
				
				isChanged |= (doctortel != value); doctortel = value;
			}
		}

        /// <summary>
        /// 
        /// </summary>	
        [LogInfo("")]
        public string Diagnostication
        {
            get { return diagnostication; }
            set
            {
                if (value != null && value.Length > 4000)
                    throw new ArgumentOutOfRangeException("Invalid value for Diagnostication", value, value.ToString());

                isChanged |= (diagnostication != value); diagnostication = value;
            }
        }

       
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Babycount
		{
			get { return babycount; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Babycount", value, value.ToString());
				
				isChanged |= (babycount != value); babycount = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Lmp
		{
			get { return lmp; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Lmp", value, value.ToString());
				
				isChanged |= (lmp != value); lmp = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Lmpdate
		{
			get { return lmpdate; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Lmpdate", value, value.ToString());
				
				isChanged |= (lmpdate != value); lmpdate = value;
			}
		}



        public decimal? Uninevolumn
        {
            get { return uninevolumn; }
            set { uninevolumn = value; }
        }


        public decimal? Weight
        {
            get { return weight; }
            set { weight = value; }
        }


        public decimal? Height
        {
            get { return height; }
            set { height = value; }
        } 
			
		
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Bultrasonic
		{
			get { return bultrasonic; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Bultrasonic", value, value.ToString());
				
				isChanged |= (bultrasonic != value); bultrasonic = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>	
		[LogInfo("")]
		public string Pregnant
		{
			get { return pregnant; }
			set	
			{
				if( value!= null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Pregnant", value, value.ToString());
				
				isChanged |= (pregnant != value); pregnant = value;
			}
		}

        /// <summary>
        /// 登记时间
        /// </summary>	
        [LogInfo("登记时间")]
        public DateTime Enterdate
        {
            get { return enterdate; }
            set { enterdate = value; }
        }
        /// <summary>
        /// 体位
        /// </summary>
        [LogInfo("体位")]
        public string Bodystyle
        {
            get { return bodystyle; }
            set
            {
                if (value != null && value.Length > 4000)
                    throw new ArgumentOutOfRangeException("Invalid value for Pregnant", value, value.ToString());

                isChanged |= (bodystyle != value); bodystyle = value;
            }
        }
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
