/*
insert license info here
*/
using System;

namespace Daan.Interface.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public sealed class DAPathologyresult:BaseDomain
	{
		#region Private Members
		private bool isChanged;
		private bool isDeleted;
		private decimal? pathologyresultid; 
		private string requestcode; 
		private string hospsamplenumber; 
		private string hospsampleid; 
		private decimal? testid; 
		private decimal? parentid; 
		private decimal? treelevel; 
		private string itemname; 
		private string result; 
		private decimal? displayorder; 
		private DateTime createdate; 		
		#endregion
		
		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public DAPathologyresult()
		{
			pathologyresultid = null; 
			requestcode = null; 
			hospsamplenumber = null; 
			hospsampleid = null; 
			testid = null; 
			parentid = null; 
			treelevel = null; 
			itemname = null; 
			result = null; 
			displayorder = null; 
			createdate = new DateTime(); 
		}
		#endregion // End of Default ( Empty ) Class Constuctor
		
		#region Public Properties
			
		/// <summary>
		/// 主键
		/// </summary>	
		[LogInfo("主键")]
		public decimal? Pathologyresultid
		{
			get { return pathologyresultid; }
			set { isChanged |= (pathologyresultid != value); pathologyresultid = value; }
		}
			
		/// <summary>
		/// 请求代码（达安条码）
		/// </summary>	
		[LogInfo("请求代码（达安条码）")]
		public string Requestcode
		{
			get { return requestcode; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Requestcode", value, value.ToString());
				
				isChanged |= (requestcode != value); requestcode = value;
			}
		}
			
		/// <summary>
		/// 医院样本号
		/// </summary>	
		[LogInfo("医院样本号")]
		public string Hospsamplenumber
		{
			get { return hospsamplenumber; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Hospsamplenumber", value, value.ToString());
				
				isChanged |= (hospsamplenumber != value); hospsamplenumber = value;
			}
		}
			
		/// <summary>
		/// 医院条码
		/// </summary>	
		[LogInfo("医院条码")]
		public string Hospsampleid
		{
			get { return hospsampleid; }
			set	
			{
				if( value!= null && value.Length > 20)
					throw new ArgumentOutOfRangeException("Invalid value for Hospsampleid", value, value.ToString());
				
				isChanged |= (hospsampleid != value); hospsampleid = value;
			}
		}
			
		/// <summary>
		/// 项目id
		/// </summary>	
		[LogInfo("项目id")]
		public decimal? Testid
		{
			get { return testid; }
			set { isChanged |= (testid != value); testid = value; }
		}
			
		/// <summary>
		/// 父ID
		/// </summary>	
		[LogInfo("父ID")]
		public decimal? Parentid
		{
			get { return parentid; }
			set { isChanged |= (parentid != value); parentid = value; }
		}
			
		/// <summary>
		/// 级数
		/// </summary>	
		[LogInfo("级数")]
		public decimal? Treelevel
		{
			get { return treelevel; }
			set { isChanged |= (treelevel != value); treelevel = value; }
		}
			
		/// <summary>
		/// 项目名称
		/// </summary>	
		[LogInfo("项目名称")]
		public string Itemname
		{
			get { return itemname; }
			set	
			{
				if( value!= null && value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Itemname", value, value.ToString());
				
				isChanged |= (itemname != value); itemname = value;
			}
		}
			
		/// <summary>
		/// 结果
		/// </summary>	
		[LogInfo("结果")]
		public string Result
		{
			get { return result; }
			set	
			{
                if (value != null && value.Length > 4000)
					throw new ArgumentOutOfRangeException("Invalid value for Result", value, value.ToString());
				
				isChanged |= (result != value); result = value;
			}
		}
			
		/// <summary>
		/// 排序
		/// </summary>	
		[LogInfo("排序")]
		public decimal? Displayorder
		{
			get { return displayorder; }
			set { isChanged |= (displayorder != value); displayorder = value; }
		}
			
		/// <summary>
		/// 创建时间
		/// </summary>	
		[LogInfo("创建时间")]
		public DateTime Createdate
		{
			get { return createdate; }
			set { isChanged |= (createdate != value); createdate = value; }
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsChanged
		{
			get { return isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public bool IsDeleted
		{
			get { return isDeleted; }
		}
		
		#endregion 
		
		
		#region Public Functions
		
		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public void MarkAsDeleted()
		{
			isDeleted = true;
			isChanged = true;
		}
		
		#endregion
		
		
	}
}
